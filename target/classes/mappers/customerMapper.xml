<?xml version="1.0" encoding="UTF-8"?>
  
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="spring.mvc.pj_mine.dao.CustomerDAO">	<!-- namespace="패키지명.인터페이스" -->
  <!-- 
   1. <mapper namespace="패키지명.인터페이스명">
   2. <id="인터페이스의 메서드명">는 유일해야 하며, 인터페이스의 메서드명을 사용한다.
      따라서 인터페이스 메서드 갯수만큼 Mapper도 작성해야 한다.
   3. select 문장은 반드시 resultType을 기술해야 한다.
      주의사항 : select 문장의 resultType이 int형이면 "SELECT * " ==> "SELECT COUNT(*) "로 바꾼다.
   4. insert, update, delete 구문은 <insert><update><delete> 엘리먼트를 사용하며, parameterType이 필수이다.
      resultType은 int형이며, 마이바티스가 알아서 성공, 실패 여부의 결과값을 넘긴다.
   5. parameterType, resultType이 클래스타입인 경우 패키지명.클래스명을 기술한다.
   6. 문장의 끝에 ';'을 붙이지 않는다.
   7.  주의사항 : 파라미터 일반변수명은 #{변수명}으로 기술하며, 메서드의 매개변수명과 반드시 일치해야 한다. 예) id=#{strId}
   8. 파라미터 값이 2개이상일 때는 parameterType을 java.util.Map 또는 VO로 받는다.
      주의사항 : Map에 추가(put)된 키명와 #{변수명}은 반드시 일치해야 한다.
   9. preparedStatement의 '?' 대신에 pstmt에서 set한 변수명이 온다. ==> #{변수명}
	-->
	<!-- 시큐리티 - 로그인시 사용 -->
	<!-- UserAuthenticationService - loadUserByUsername에서 호출 -->
	<select id="selectCustomer" parameterType="String" resultType="spring.mvc.pj_mine.dto.CustomerDTO">
       SELECT * FROM mvc_customer_tbl WHERE id=#{strId}
    </select>
	
	<!-- 시큐리티 - UserLoginSuccessHandler에서 호출 -->
	<select id="authorityCheck" resultType="String">
		SELECT authority FROM mvc_customer_tbl WHERE id = #{id}
	</select>
	
	<!-- 시큐리티 - UserLoginFailureHandler - pwdCheck -->
	<select id="pwdCheck" parameterType="String" resultType="String">
       SELECT password FROM mvc_customer_tbl WHERE id=#{strId}
    </select>
	
  <!-- ID 중복확인 처리 / 시큐리티 - 회원가입여부 -->	<!-- resultType = "Integer"일 경우 COUNT(*) -->
  	<select id="idCheck" parameterType="String" resultType="Integer">
       SELECT COUNT(*) FROM mvc_customer_tbl WHERE id=#{strId}
    </select>
  	
  <!-- email 중복확인 처리 / 시큐리티 - 회원가입여부 -->	
  	<select id="emailCheck" parameterType="String" resultType="Integer">
       SELECT COUNT(*) FROM mvc_customer_tbl WHERE email=#{strEmail}
    </select>	
  	
  	<!-- 시큐리티 -->
  	<select id="selectKey" parameterType="String" resultType="Integer">
       SELECT COUNT(*) FROM mvc_customer_tbl WHERE key=#{key}
    </select>
    
  	<!-- 시큐리티 -->
  	<update id="updateGrade" parameterType="String">
  		UPDATE mvc_customer_tbl
  		   SET enabled = 1
  		 WHERE key=#{key}
  	</update>
 
  <!-- 회원가입 처리 -->		<!-- I, U, D는  resultType 사용 안함 -->	<!-- 시큐리티 : key 컬럼 추가 -->
  	<insert id="insertCustomer" parameterType="spring.mvc.pj_mine.dto.CustomerDTO">
  		INSERT INTO mvc_customer_tbl(id, password, passwordHint, name, birthday, address, hp, email,  key)
		VALUES(#{id}, #{password}, #{passwordHint}, #{name}, #{birth}, #{address}, #{hp}, #{email},  #{key})
  	</insert>
  	
  <!-- 회원정보 인증 및 상세페이지 -->
  	<select id="getCustomerDetail" parameterType="String" resultType="spring.mvc.pj_mine.dto.CustomerDTO">
       SELECT password,name,passwordHint, birthday AS birth, address, hp , email FROM mvc_customer_tbl WHERE id = #{strId}
    </select>
  	
  <!-- 회원정보 수정 처리 -->	
    <update id="updateCustomer" parameterType="spring.mvc.pj_mine.dto.CustomerDTO">
       UPDATE mvc_customer_tbl SET password =#{password} , name =#{name}, passwordHint=#{passwordHint} , birthday =#{birth} , address =#{address}, hp=#{hp} ,
       email=#{email} WHERE id =#{id}
    </update>
  
  <!-- 회원정보 탈퇴 처리 -->	
    <delete id="deleteCustomer" parameterType="String">
      DELETE FROM mvc_customer_tbl WHERE id = #{strId}
    </delete>
    
  </mapper>